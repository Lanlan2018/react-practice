{"version":3,"sources":["component/WeatherDisplay.js","component/CitySelector.js","component/Weather.js","component/DailyWeather.js","App.js","serviceWorker.js","index.js"],"names":["WeatherDisplay","props","weatherIcon","weather","weatherCode","toFixed","className","onClick","handleClick","time","Provider","value","color","size","weatherText","highTemp","lowTemp","CitySelector","cityList","name","handleChange","bind","event","this","onCityChange","target","city","onChange","map","item","key","React","Component","Weather","state","isLoaded","weatherDataArr","cityChange","fetchWeather","setState","fetch","then","response","json","HeWeather6","daily_forecast","date","cond_code_d","tmp_max","tmp_min","cond_txt_d","weatherItem","history","push","weatherObj","clickWeatherIcon","DailyWeather","match","params","filter","sunrise","sr","sunside","ss","windDir","wind_dir","windSpeed","wind_sc","rainPercent","pop","class","Home","App","to","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6e4fdfbd.chunk.js","sourcesContent":["import React from 'react';\r\nimport { \r\n WiDaySunny,\r\nWiCloudy,\r\nWiCloudyGusts,\r\nWiCloud,\r\nWiDayRainMix,\r\nWiRainMix,\r\nWiRain,\r\nWiSnowflakeCold,\r\nWiFog,\r\n\r\n} from \"react-icons/wi\";\r\nimport { IconContext } from \"react-icons\";\r\n\r\nexport default function WeatherDisplay(props) {\r\n  let weatherIcon;\r\n  switch (props.weather.weatherCode) {\r\n    case 100:\r\n      weatherIcon = <WiDaySunny />;\r\n      break;\r\n    case 101:\r\n    case 102:\r\n      weatherIcon = <WiCloudy />;\r\n      break;\r\n    case 103:\r\n      weatherIcon = <WiCloudyGusts />;\r\n      break;\r\n    case 104:\r\n      weatherIcon = <WiCloud />;\r\n      break;\r\n    case 305:\r\n      weatherIcon = <WiDayRainMix />;\r\n      break;\r\n    case 306:\r\n      weatherIcon = <WiRainMix />;\r\n      break;\r\n    case 307:\r\n      weatherIcon = <WiRain />;\r\n      break;\r\n  }\r\n  if (!weatherIcon) {\r\n    switch ((props.weather.weatherCode / 100).toFixed(0)) {\r\n      case \"3\":\r\n        weatherIcon = <WiRain />;\r\n        break;\r\n      case \"4\":\r\n        weatherIcon = <WiSnowflakeCold />;\r\n        break;\r\n      case \"5\":\r\n        weatherIcon = <WiFog />;\r\n        break;\r\n      default:\r\n        weatherIcon = <WiCloudy />;\r\n        break;\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"dayly-weather-container\" onClick={props.handleClick}>\r\n      <div className=\"time\">\r\n        {props.weather.time}\r\n      </div>\r\n      <IconContext.Provider value={{ color: \"blue\", size: \"4em\", className: \"global-weather-icon\" }}>\r\n        <div>\r\n          {weatherIcon}\r\n        </div>\r\n      </IconContext.Provider>\r\n      <h3>{props.weather.weatherText}</h3>\r\n      <div className=\"temp\">\r\n        <span className=\"high-temp\">{props.weather.highTemp}℃</span>\r\n        <span className=\"low-temp\">{props.weather.lowTemp}℃</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\n\r\nexport default class CitySelector extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.cityList = [\r\n        {name:'上海'},\r\n        {name:'北京'},\r\n        {name:'广州'},\r\n        {name:'深圳'},\r\n        {name:'拉萨'},\r\n        {name:'三亚'},\r\n    ]\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(event){\r\n      this.props.onCityChange(event.target.value);\r\n  }\r\n\r\n  render() {\r\n    const { city } = this.props;\r\n    return (\r\n        <select onChange={this.handleChange}>\r\n            {this.cityList.map(item=>\r\n                <option key={item.name} value={item.name}>{item.name}</option>\r\n            )}\r\n        </select>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport WeatherDisplay from './WeatherDisplay'\r\nimport CitySelector from \"./CitySelector\"\r\n\r\nclass Weather extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isLoaded: true,\r\n      weatherDataArr: [],\r\n      city: '上海'\r\n    };\r\n    this.cityChange = this.cityChange.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.fetchWeather(this.state.city);\r\n  }\r\n\r\n  fetchWeather(city) {\r\n    this.setState({ isLoaded: true });\r\n    fetch('https://free-api.heweather.net/s6/weather?key=5985d625110348c3ac510770a2f400b5&location=' + city)\r\n      .then(response => response.json()).then(item => {\r\n        const weatherDataArr = item.HeWeather6[0].daily_forecast.map(item => {\r\n          return {\r\n            time: item.date,\r\n            weatherCode: item.cond_code_d,\r\n            highTemp: item.tmp_max,\r\n            lowTemp: item.tmp_min,\r\n            weatherText: item.cond_txt_d\r\n          }\r\n        });\r\n        this.setState({\r\n          weatherDataArr: weatherDataArr,\r\n          isLoaded: false,\r\n          city\r\n        })\r\n      })\r\n  }\r\n\r\n  cityChange(city) {\r\n    this.fetchWeather(city);\r\n  }\r\n\r\n  clickWeatherIcon(weatherItem) {\r\n    this.props.history.push(`/DailyWeather/${this.state.city}/${weatherItem.time}`);\r\n  }\r\n\r\n  render() {\r\n    const { weatherDataArr, isLoaded,city } = this.state;\r\n    return (\r\n      <div>\r\n        <CitySelector onCityChange={this.cityChange} />\r\n        <h4>  One Week Weather Forecast Of {city}  </h4>\r\n        {isLoaded ? <h3> Loading </h3> : ''}\r\n        {weatherDataArr.map((weatherObj) =>\r\n          <WeatherDisplay key={weatherObj.time} weather={weatherObj} handleClick={this.clickWeatherIcon.bind(this, weatherObj)} />\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Weather;\r\n\r\n","\r\nimport React from 'react';\r\nimport WeatherDisplay from './WeatherDisplay'\r\n\r\nclass DailyWeather extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      weatherDataArr: [],\r\n      isLoaded: false,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://free-api.heweather.net/s6/weather?key=5985d625110348c3ac510770a2f400b5&location=' + this.props.match.params.city)\r\n      .then(response => response.json()).then(item => {\r\n        const weatherDataArr = item.HeWeather6[0].daily_forecast.filter(item => item.date === this.props.match.params.date)\r\n          .map(item => {\r\n            return {\r\n              time: item.date,\r\n              weatherCode: item.cond_code_d,\r\n              highTemp: item.tmp_max,\r\n              lowTemp: item.tmp_min,\r\n              weatherText: item.cond_txt_d,\r\n              sunrise: item.sr,\r\n              sunside: item.ss,\r\n              windDir: item.wind_dir,\r\n              windSpeed: item.wind_sc,\r\n              rainPercent: item.pop\r\n            }\r\n          });\r\n        this.setState({\r\n          weatherDataArr: weatherDataArr,\r\n          isLoaded: false,\r\n        })\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const { weatherDataArr, isLoaded } = this.state;\r\n    return (\r\n      <div>\r\n        <h4>  One Day Weather Forecast Of {this.props.match.params.city}  </h4>\r\n        {isLoaded ? <h3> Loading </h3> : ''}\r\n\r\n        {weatherDataArr.map((weatherObj) =>\r\n          <div>\r\n            <WeatherDisplay key={weatherObj.time} weather={weatherObj} />\r\n            <div class=\"clearBoth\">\r\n              <h4>日出时间： {weatherObj.sunrise} 日落时间：{weatherObj.sunside} </h4>\r\n              <h4>风向：  {weatherObj.windDir}   风力：{weatherObj.windSpeed} </h4>\r\n              <h4>降水概率: {weatherObj.rainPercent}%</h4>\r\n            </div>\r\n          </div>)}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DailyWeather;\r\n\r\n","import React from 'react';\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch, Route, Link, useRouteMatch, useParms\r\n} from 'react-router-dom';\r\nimport Weather from \"./component/Weather\"\r\nimport DailyWeather from \"./component/DailyWeather\"\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <nav>\r\n          <ul>\r\n            <li>\r\n              <Link to=\"/\">Home</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/weather\">Weather page</Link>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n\r\n        <Switch>\r\n          <Route path=\"/weather\" component={Weather}>\r\n          </Route>\r\n          <Route path=\"/dailyWeather/:city/:date\" component={DailyWeather}>\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Home />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nfunction Home() {\r\n  return <h1>Test default Router - Home page Hellow World!!!</h1>\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}