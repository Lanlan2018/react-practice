{"version":3,"sources":["component/WeatherDisplay.js","component/CitySearchBox.js","component/Weather.js","component/DailyWeather.js","App.js","serviceWorker.js","index.js"],"names":["WeatherDisplay","props","weatherIcon","weather","weatherCode","toFixed","className","onClick","handleClick","time","Provider","value","color","size","weatherText","highTemp","lowTemp","CitySearchBox","inputOnBlur","setState","isShowCheckBox","inputOnFocus","state","keyWord","length","searchCity","resultArr","keyWordChange","bind","fetch","then","response","json","res","code","cityList","location","map","cityData","name","event","target","this","onCityChange","cityChange","type","placeholder","onChange","onBlur","onFocus","item","key","optionClick","React","Component","Weather","isLoaded","weatherDataArr","city","fetchWeather","HeWeather6","daily_forecast","date","cond_code_d","tmp_max","tmp_min","cond_txt_d","weatherItem","history","push","weatherObj","clickWeatherIcon","DailyWeather","match","params","filter","sunrise","sr","sunside","ss","windDir","wind_dir","windSpeed","wind_sc","rainPercent","pop","uv_index","class","Home","App","to","path","component","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7931e775.chunk.js","sourcesContent":["import React from 'react';\r\nimport { \r\n  WiDaySunny,\r\n  WiCloudy,\r\n  WiCloudyGusts,\r\n  WiCloud,\r\n  WiDayRainMix,\r\n  WiRainMix,\r\n  WiRain,\r\n  WiSnowflakeCold,\r\n  WiFog,\r\n} from \"react-icons/wi\";\r\nimport { IconContext } from \"react-icons\";\r\n\r\nexport default function WeatherDisplay(props) {\r\n  let weatherIcon;\r\n  switch (props.weather.weatherCode) {\r\n    case 100:\r\n      weatherIcon = <WiDaySunny />;\r\n      break;\r\n    case 101:\r\n    case 102:\r\n      weatherIcon = <WiCloudy />;\r\n      break;\r\n    case 103:\r\n      weatherIcon = <WiCloudyGusts />;\r\n      break;\r\n    case 104:\r\n      weatherIcon = <WiCloud />;\r\n      break;\r\n    case 305:\r\n      weatherIcon = <WiDayRainMix />;\r\n      break;\r\n    case 306:\r\n      weatherIcon = <WiRainMix />;\r\n      break;\r\n    case 307:\r\n      weatherIcon = <WiRain />;\r\n      break;\r\n  }\r\n  if (!weatherIcon) {\r\n    switch ((props.weather.weatherCode / 100).toFixed(0)) {\r\n      case \"3\":\r\n        weatherIcon = <WiRain />;\r\n        break;\r\n      case \"4\":\r\n        weatherIcon = <WiSnowflakeCold />;\r\n        break;\r\n      case \"5\":\r\n        weatherIcon = <WiFog />;\r\n        break;\r\n      default:\r\n        weatherIcon = <WiCloudy />;\r\n        break;\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"dayly-weather-container\" onClick={props.handleClick}>\r\n      <div className=\"time\">\r\n        {props.weather.time}\r\n      </div>\r\n      <IconContext.Provider value={{ color: \"blue\", size: \"4em\", className: \"global-weather-icon\" }}>\r\n        <div>\r\n          {weatherIcon}\r\n        </div>\r\n      </IconContext.Provider>\r\n      <h3>{props.weather.weatherText}</h3>\r\n      <div className=\"temp\">\r\n        <span className=\"high-temp\">{props.weather.highTemp}℃</span>\r\n        <span className=\"low-temp\">{props.weather.lowTemp}℃</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\n\r\nexport default class CitySearchBox extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      keyWord: '',\r\n      resultArr: []\r\n    }\r\n    this.keyWordChange = this.keyWordChange.bind(this);\r\n  }\r\n\r\n  searchCity(keyWord) {\r\n    fetch('https://geoapi.heweather.net/v2/city/lookup?key=5985d625110348c3ac510770a2f400b5&location=' + keyWord)\r\n      .then(response => response.json()).then(res => {\r\n        if (res.code === '404') {\r\n          this.setState({\r\n            resultArr: []\r\n          })\r\n        } else {\r\n          const cityList = res.location.map(cityData => ({ name: cityData.name }));\r\n          this.setState({\r\n            resultArr: cityList\r\n          })\r\n\r\n        }\r\n      })\r\n  }\r\n\r\n  keyWordChange(event) {\r\n    if (event.target.value.length >= 2) {\r\n      this.setState({\r\n        keyWord: event.target.value\r\n      })\r\n      this.searchCity(event.target.value);\r\n    } else {\r\n      this.setState({\r\n        resultArr: [],\r\n        keyWord: event.target.value\r\n      })\r\n    }\r\n  }\r\n\r\n  cityChange(event) {\r\n    this.props.onCityChange(event);\r\n  }\r\n\r\n  optionClick(name) {\r\n    this.setState({\r\n      keyWord: name,\r\n      resultArr: []\r\n    })\r\n    this.cityChange(name)\r\n  }\r\n\r\n  inputOnBlur = () => {\r\n    this.setState({\r\n      isShowCheckBox: false\r\n    })\r\n  }\r\n\r\n  inputOnFocus = () => {\r\n    this.setState({\r\n      isShowCheckBox: true\r\n    })\r\n    if (this.state.keyWord.length >= 2) {\r\n      this.searchCity(this.state.keyWord);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { keyWord, resultArr, isShowCheckBox } = this.state;\r\n    return (\r\n      <div className=\"city-search\">\r\n        <input type=\"text\" placeholder=\"Please input more than 2 characters\" value={keyWord} onChange={this.keyWordChange} onBlur={this.inputOnBlur}\r\n          onFocus={this.inputOnFocus} />\r\n        {\r\n          resultArr.length ?\r\n          <div className=\"keyWord-list\">\r\n            {resultArr.map(item => <div className=\"list-item\" key={item.name} onClick={this.optionClick.bind(this, item.name)}>{item.name}</div>)}\r\n          </div>\r\n          : keyWord.length >= 2 && isShowCheckBox ? <div className=\"keyWord-list\">No results</div> : ''\r\n        }\r\n      </div>\r\n\r\n    )\r\n  }\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport WeatherDisplay from './WeatherDisplay'\r\nimport CitySearchBox from \"./CitySearchBox\"\r\n\r\nclass Weather extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isLoaded: true,\r\n      weatherDataArr: [],\r\n      city: '上海'\r\n    };\r\n    this.cityChange = this.cityChange.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchWeather(this.state.city);\r\n  }\r\n\r\n  fetchWeather(city) {\r\n    this.setState({ isLoaded: true });\r\n    fetch('https://free-api.heweather.net/s6/weather?key=5985d625110348c3ac510770a2f400b5&location=' + city)\r\n      .then(response => response.json()).then(item => {\r\n        const weatherDataArr = item.HeWeather6[0].daily_forecast.map(item => {\r\n          return {\r\n            time: item.date,\r\n            weatherCode: item.cond_code_d,\r\n            highTemp: item.tmp_max,\r\n            lowTemp: item.tmp_min,\r\n            weatherText: item.cond_txt_d\r\n          }\r\n        });\r\n        this.setState({\r\n          weatherDataArr: weatherDataArr,\r\n          isLoaded: false,\r\n          city\r\n        })\r\n      })\r\n  }\r\n\r\n  cityChange(city) {\r\n    this.fetchWeather(city);\r\n  }\r\n\r\n  clickWeatherIcon(weatherItem) {\r\n    this.props.history.push(`/DailyWeather/${this.state.city}/${weatherItem.time}`);\r\n  }\r\n\r\n  render() {\r\n    const { weatherDataArr, isLoaded, city } = this.state;\r\n    return (\r\n      <div>\r\n        <div>City Search Box:</div>\r\n        <CitySearchBox onCityChange={this.cityChange} />\r\n        {/* <CitySelector onCityChange={this.cityChange} /> */}\r\n        <h2 className=\"page-title\">Three Days Weather Forecast Of {city}</h2>\r\n        {isLoaded ? <h3>Loading ... </h3> : ''}\r\n        {weatherDataArr.map((weatherObj) =>\r\n          <WeatherDisplay key={weatherObj.time} weather={weatherObj} handleClick={this.clickWeatherIcon.bind(this, weatherObj)} />\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Weather;\r\n\r\n","\r\nimport React from 'react';\r\nimport WeatherDisplay from './WeatherDisplay'\r\n\r\nclass DailyWeather extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      weatherDataArr: [],\r\n      isLoaded: false,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://free-api.heweather.net/s6/weather?key=5985d625110348c3ac510770a2f400b5&location=' + this.props.match.params.city)\r\n      .then(response => response.json()).then(item => {\r\n        const weatherDataArr = item.HeWeather6[0].daily_forecast.filter(item => item.date === this.props.match.params.date)\r\n          .map(item => {\r\n            return {\r\n              time: item.date,\r\n              weatherCode: item.cond_code_d,\r\n              highTemp: item.tmp_max,\r\n              lowTemp: item.tmp_min,\r\n              weatherText: item.cond_txt_d,\r\n              sunrise: item.sr,\r\n              sunside: item.ss,\r\n              windDir: item.wind_dir,\r\n              windSpeed: item.wind_sc,\r\n              rainPercent: item.pop,\r\n              uv_index: item.uv_index\r\n            }\r\n          });\r\n        this.setState({\r\n          weatherDataArr: weatherDataArr,\r\n          isLoaded: false,\r\n        })\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const { weatherDataArr, isLoaded } = this.state;\r\n    return (\r\n      <div>\r\n        <h2 className=\"page-title\">One Day Weather Forecast Detail Of {this.props.match.params.city}</h2>\r\n        {isLoaded ? <h2>Loading ...</h2> : ''}\r\n\r\n        {weatherDataArr.map((weatherObj) =>\r\n          <div>\r\n            <WeatherDisplay key={weatherObj.time} weather={weatherObj} />\r\n            <div class=\"clearBoth\">\r\n              <h4>日出时间:&nbsp;&nbsp;{weatherObj.sunrise}&nbsp;&nbsp;&nbsp;&nbsp;日落时间:&nbsp;&nbsp;{weatherObj.sunside} </h4>\r\n              <h4>风向:&nbsp;&nbsp;{weatherObj.windDir}&nbsp;&nbsp;&nbsp;&nbsp;风力:&nbsp;&nbsp;{weatherObj.windSpeed} </h4>\r\n              <h4>降水概率: {weatherObj.rainPercent}%</h4>\r\n              <h4>紫外线强度指数: {weatherObj.uv_index}%</h4>\r\n            </div>\r\n          </div>)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DailyWeather;\r\n\r\n","import React from 'react';\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from 'react-router-dom';\r\nimport Weather from \"./component/Weather\"\r\nimport DailyWeather from \"./component/DailyWeather\"\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <nav>\r\n          <ul>\r\n            <li>\r\n              <Link to=\"/\">Home</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/weather\">Weather page</Link>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n\r\n        <Switch>\r\n          <Route path=\"/weather\" component={Weather}>\r\n          </Route>\r\n          <Route path=\"/dailyWeather/:city/:date\" component={DailyWeather}>\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Home />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nfunction Home() {\r\n  return <h2 className=\"page-title\">Test default Router - Home page - Hellow World!!!</h2>\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}